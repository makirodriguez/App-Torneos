type Torneo {
  id: ID!
  name: String
  sport: String
  startDate: String
  endDate: String
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Perfil {
  id: ID!
  idPerfil: ID!
  name: String
  lastName: String
  number: String
  email: String
  country: String
  province: String
  filePath: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTorneoConnection {
  items: [Torneo]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelTorneoFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  sport: ModelStringInput
  startDate: ModelStringInput
  endDate: ModelStringInput
  description: ModelStringInput
  and: [ModelTorneoFilterInput]
  or: [ModelTorneoFilterInput]
  not: ModelTorneoFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getTorneo(id: ID!): Torneo
  listTorneos(filter: ModelTorneoFilterInput, limit: Int, nextToken: String): ModelTorneoConnection
  getPerfil(id: ID!): Perfil
  listPerfils(filter: ModelPerfilFilterInput, limit: Int, nextToken: String): ModelPerfilConnection
}

input CreateTorneoInput {
  id: ID
  name: String
  sport: String
  startDate: String
  endDate: String
  description: String
}

input UpdateTorneoInput {
  id: ID!
  name: String
  sport: String
  startDate: String
  endDate: String
  description: String
}

input DeleteTorneoInput {
  id: ID!
}

type Mutation {
  createTorneo(input: CreateTorneoInput!, condition: ModelTorneoConditionInput): Torneo
  updateTorneo(input: UpdateTorneoInput!, condition: ModelTorneoConditionInput): Torneo
  deleteTorneo(input: DeleteTorneoInput!, condition: ModelTorneoConditionInput): Torneo
  createPerfil(input: CreatePerfilInput!, condition: ModelPerfilConditionInput): Perfil
  updatePerfil(input: UpdatePerfilInput!, condition: ModelPerfilConditionInput): Perfil
  deletePerfil(input: DeletePerfilInput!, condition: ModelPerfilConditionInput): Perfil
}

input ModelTorneoConditionInput {
  name: ModelStringInput
  sport: ModelStringInput
  startDate: ModelStringInput
  endDate: ModelStringInput
  description: ModelStringInput
  and: [ModelTorneoConditionInput]
  or: [ModelTorneoConditionInput]
  not: ModelTorneoConditionInput
}

type Subscription {
  onCreateTorneo: Torneo @aws_subscribe(mutations: ["createTorneo"])
  onUpdateTorneo: Torneo @aws_subscribe(mutations: ["updateTorneo"])
  onDeleteTorneo: Torneo @aws_subscribe(mutations: ["deleteTorneo"])
  onCreatePerfil: Perfil @aws_subscribe(mutations: ["createPerfil"])
  onUpdatePerfil: Perfil @aws_subscribe(mutations: ["updatePerfil"])
  onDeletePerfil: Perfil @aws_subscribe(mutations: ["deletePerfil"])
}

type ModelPerfilConnection {
  items: [Perfil]
  nextToken: String
}

input ModelPerfilFilterInput {
  idPerfil: ModelIDInput
  name: ModelStringInput
  lastName: ModelStringInput
  number: ModelStringInput
  email: ModelStringInput
  country: ModelStringInput
  province: ModelStringInput
  filePath: ModelStringInput
  and: [ModelPerfilFilterInput]
  or: [ModelPerfilFilterInput]
  not: ModelPerfilFilterInput
}

input CreatePerfilInput {
  id: ID
  idPerfil: ID!
  name: String
  lastName: String
  number: String
  email: String
  country: String
  province: String
  filePath: String
}

input UpdatePerfilInput {
  idPerfil: ID
  name: String
  lastName: String
  number: String
  email: String
  country: String
  province: String
  filePath: String
}

input DeletePerfilInput {
  id: ID!
}

input ModelPerfilConditionInput {
  idPerfil: ModelIDInput
  name: ModelStringInput
  lastName: ModelStringInput
  number: ModelStringInput
  email: ModelStringInput
  country: ModelStringInput
  province: ModelStringInput
  filePath: ModelStringInput
  and: [ModelPerfilConditionInput]
  or: [ModelPerfilConditionInput]
  not: ModelPerfilConditionInput
}
